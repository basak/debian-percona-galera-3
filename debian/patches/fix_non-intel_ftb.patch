From: Robie Basak <robie.basak@canonical.com>
Subject: Fix SCons files to allow building on non-Intel architectures.
Forwarded: yes

x86 seems to be expected to be non-zero on on Intel by code elsewhere, so make
sure this happens. This fixes things like SSE instructions being requested on
non-Intel architectures.

Additionally, don't use -mtune or similar, since on a distribution build we
want to use the distribution toolchain default unless there's a good reason to
do otherwise. In particular, using -mtune=native on a builder would mean that
you'd have to have a builder-equivalent machine to run the code on, whereas
binary distributions are expected to work on all hardware supported by the
distribution's toolchain defaults.

--- a/SConstruct
+++ b/SConstruct
@@ -24,10 +24,11 @@
 print 'Host: ' + sysname + ' ' + machine + ' ' + bits
 
 x86 = 0
-if bits == '32bit':
-    x86 = 32
-elif bits == '64bit':
-    x86 = 64
+if machine in ['i386', 'x86_64']:
+    if bits == '32bit':
+        x86 = 32
+    elif bits == '64bit':
+        x86 = 64
 
 
 #
@@ -91,27 +92,12 @@
 if dbug:
     opt_flags = opt_flags + ' -DGU_DBUG_ON'
 
-
-if x86 == 32:
-    compile_arch = ' -m32 -march=i686'
-    link_arch    = compile_arch
-    if sysname == 'linux':
-        link_arch = link_arch + ' -Wl,-melf_i386'
-elif x86 == 64 and sysname != 'sunos':
-    compile_arch = ' -m64'
-    link_arch    = compile_arch
-    if sysname == 'linux':
-        link_arch = link_arch + ' -Wl,-melf_x86_64'
-elif machine == 'ppc64':
-    compile_arch = ' -mtune=native'
-    link_arch    = ''
-elif sysname == 'sunos':
-    compile_arch = ' -mtune=native'
-    link_arch    = ''
-else:
-    compile_arch = ''
-    link_arch    = ''
-
+# No overriding of target architecture, instruction set or subset. On a
+# distribution build, the distribution toolchain default knows best. We
+# certainly don't want to tie the built binaries to running only on the
+# builders.
+compile_arch = ''
+link_arch    = ''
 
 boost      = int(ARGUMENTS.get('boost', 1))
 boost_pool = int(ARGUMENTS.get('boost_pool', 0))
